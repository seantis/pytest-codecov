[build-system]
requires = [
  "setuptools>=61.0.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "pytest-codecov"
dynamic = ["version"]
description = "Pytest plugin for uploading pytest-cov results to codecov.io"
readme = "README.rst"
requires-python = ">=3.8"
authors = [
    { name = "David Salvisberg", email = "david.salvisberg@seantis.ch" },
]
maintainers = [
    { name = "David Salvisberg", email = "david.salvisberg@seantis.ch" },
]
license = { file = "LICENSE" }
classifiers = [
    "Framework :: Pytest",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Testing",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    "pytest>=4.6.0",
    "pytest-cov>=2.11.0",
    "coverage[toml]>=5.2.1",
    "requests>=2.25.1",
]

[project.optional-dependencies]
git = [
    "GitPython>=3.1.15",
]

[project.urls]
Repository = "https://github.com/seantis/pytest-codecov"

[project.entry-points.pytest11]
codecov = "pytest_codecov"

[tool.setuptools.package-data]
pytest_codecov = ["py.typed"]

[tool.setuptools.dynamic]
version = {attr = "pytest_codecov.__version__"}

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
source = ["pytest_codecov"]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "pragma: unreachable",
    "assert_never[(]",
    "@overload",
    "raise NotImplementedError",
    "raise AssertionError[(].unreachable.[)]",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__."
]

[tool.mypy]
python_version = "3.8"
follow_imports = "silent"
namespace_packages = true
explicit_package_bases = true
strict = true
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
src = ["src", "test"]
include = [
    "pyproject.toml",
    "src/**/*.py",
    "tests/**/*.py",
]
line-length = 79
indent-width = 4
target-version = "py38"

[tool.ruff.lint]
select = [
    "A005",
    "ASYNC",
    "B0",
    "B904",
    "B909",
    "C4",
    "COM818",
    "E",
    "F",
    "FLY002",
    "FURB",
    "G010",
    "G2",
    "I002",
    "ISC",
    "LOG",
    "N",
    "PERF",
    "PGH004",
    "PGH005",
    "PIE",
    "PT",
    "PYI",
    "Q",
    "RUF",
    "S",
    "SIM",
    "SLOT",
    "T",
    "UP",
    "W",
]
ignore = [
    "FURB101",
    "FURB103",
]
unfixable = []
preview = true

[tool.ruff.lint.extend-per-file-ignores]
"src/**/*.py" = ["PT"]
"tests/**/*.py" = [
  "S",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = []
classmethod-decorators = []

[tool.ruff.lint.flake8-quotes]
avoid-escape = true
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.tox]
legacy_tox_ini = """
    [tox]
    envlist = py38,py39,py310,py311,py312,py313,mypy,ruff,report

    [gh-actions]
    python =
        3.8: py38
        3.9: py39
        3.10: py310
        3.11: py311,ruff,mypy
        3.12: py312
        3.13: py313

    [testenv]
    setenv =
        py{38,39,310,311,312,313}: COVERAGE_FILE = .coverage.{envname}
    commands =
        pytest --cov --cov-report= {posargs:tests}
        pytest -n2 --cov --cov-report= {posargs:tests}
    deps =
        pytest
        coverage
        pytest-cov
        pytest-xdist
        .
        GitPython

    [testenv:mypy]
    basepython = python3.11
    deps =
        -e{toxinidir}[git]
        mypy
        types-requests
    commands =
        mypy -p pytest_codecov -p tests --python-version 3.9
        mypy -p pytest_codecov -p tests --python-version 3.10
        mypy -p pytest_codecov -p tests --python-version 3.11
        mypy -p pytest_codecov -p tests --python-version 3.12
        mypy -p pytest_codecov -p tests --python-version 3.13

    [testenv:ruff]
    skip_install = true
    deps = ruff
    commands = ruff check

    [testenv:report]
    skip_install = true
    deps = coverage
    commands =
        coverage combine
        coverage report
"""
